// Generated by Molecule 0.7.3

use molecule::prelude::*;
#[derive(Clone)]
pub struct Uint32(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Uint32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Uint32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Uint32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for Uint32 {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        Uint32::new_unchecked(v.into())
    }
}
impl Uint32 {
    pub const TOTAL_SIZE: usize = 4;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 4;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1..2))
    }
    pub fn nth2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(2..3))
    }
    pub fn nth3(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(3..4))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Uint32 {
    type Builder = Uint32Builder;
    const NAME: &'static str = "Uint32";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Uint32(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Uint32Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Uint32Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([self.nth0(), self.nth1(), self.nth2(), self.nth3()])
    }
}
#[derive(Clone, Copy)]
pub struct Uint32Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for Uint32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for Uint32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for Uint32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> Uint32Reader<'r> {
    pub const TOTAL_SIZE: usize = 4;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 4;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn nth2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[2..3])
    }
    pub fn nth3(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[3..4])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for Uint32Reader<'r> {
    type Entity = Uint32;
    const NAME: &'static str = "Uint32Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        Uint32Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct Uint32Builder(pub(crate) [Byte; 4]);
impl ::core::fmt::Debug for Uint32Builder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for Uint32Builder {
    fn default() -> Self {
        Uint32Builder([
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
        ])
    }
}
impl Uint32Builder {
    pub const TOTAL_SIZE: usize = 4;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 4;
    pub fn set(mut self, v: [Byte; 4]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
}
impl molecule::prelude::Builder for Uint32Builder {
    type Entity = Uint32;
    const NAME: &'static str = "Uint32Builder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Uint32::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Uint64(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Uint64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Uint64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Uint64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for Uint64 {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0];
        Uint64::new_unchecked(v.into())
    }
}
impl Uint64 {
    pub const TOTAL_SIZE: usize = 8;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 8;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1..2))
    }
    pub fn nth2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(2..3))
    }
    pub fn nth3(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(3..4))
    }
    pub fn nth4(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(4..5))
    }
    pub fn nth5(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(5..6))
    }
    pub fn nth6(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(6..7))
    }
    pub fn nth7(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(7..8))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Uint64 {
    type Builder = Uint64Builder;
    const NAME: &'static str = "Uint64";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Uint64(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Uint64Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Uint64Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([
            self.nth0(),
            self.nth1(),
            self.nth2(),
            self.nth3(),
            self.nth4(),
            self.nth5(),
            self.nth6(),
            self.nth7(),
        ])
    }
}
#[derive(Clone, Copy)]
pub struct Uint64Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for Uint64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for Uint64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for Uint64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> Uint64Reader<'r> {
    pub const TOTAL_SIZE: usize = 8;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 8;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn nth2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[2..3])
    }
    pub fn nth3(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[3..4])
    }
    pub fn nth4(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[4..5])
    }
    pub fn nth5(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[5..6])
    }
    pub fn nth6(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[6..7])
    }
    pub fn nth7(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[7..8])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for Uint64Reader<'r> {
    type Entity = Uint64;
    const NAME: &'static str = "Uint64Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        Uint64Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct Uint64Builder(pub(crate) [Byte; 8]);
impl ::core::fmt::Debug for Uint64Builder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for Uint64Builder {
    fn default() -> Self {
        Uint64Builder([
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
        ])
    }
}
impl Uint64Builder {
    pub const TOTAL_SIZE: usize = 8;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 8;
    pub fn set(mut self, v: [Byte; 8]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Byte) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Byte) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Byte) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Byte) -> Self {
        self.0[7] = v;
        self
    }
}
impl molecule::prelude::Builder for Uint64Builder {
    type Entity = Uint64;
    const NAME: &'static str = "Uint64Builder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Uint64::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Bytes32(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Bytes32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Bytes32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Bytes32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for Bytes32 {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ];
        Bytes32::new_unchecked(v.into())
    }
}
impl Bytes32 {
    pub const TOTAL_SIZE: usize = 32;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 32;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1..2))
    }
    pub fn nth2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(2..3))
    }
    pub fn nth3(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(3..4))
    }
    pub fn nth4(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(4..5))
    }
    pub fn nth5(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(5..6))
    }
    pub fn nth6(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(6..7))
    }
    pub fn nth7(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(7..8))
    }
    pub fn nth8(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(8..9))
    }
    pub fn nth9(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(9..10))
    }
    pub fn nth10(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(10..11))
    }
    pub fn nth11(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(11..12))
    }
    pub fn nth12(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(12..13))
    }
    pub fn nth13(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(13..14))
    }
    pub fn nth14(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(14..15))
    }
    pub fn nth15(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(15..16))
    }
    pub fn nth16(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(16..17))
    }
    pub fn nth17(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(17..18))
    }
    pub fn nth18(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(18..19))
    }
    pub fn nth19(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(19..20))
    }
    pub fn nth20(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(20..21))
    }
    pub fn nth21(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(21..22))
    }
    pub fn nth22(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(22..23))
    }
    pub fn nth23(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(23..24))
    }
    pub fn nth24(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(24..25))
    }
    pub fn nth25(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(25..26))
    }
    pub fn nth26(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(26..27))
    }
    pub fn nth27(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(27..28))
    }
    pub fn nth28(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(28..29))
    }
    pub fn nth29(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(29..30))
    }
    pub fn nth30(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(30..31))
    }
    pub fn nth31(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(31..32))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> Bytes32Reader<'r> {
        Bytes32Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Bytes32 {
    type Builder = Bytes32Builder;
    const NAME: &'static str = "Bytes32";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Bytes32(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Bytes32Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Bytes32Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([
            self.nth0(),
            self.nth1(),
            self.nth2(),
            self.nth3(),
            self.nth4(),
            self.nth5(),
            self.nth6(),
            self.nth7(),
            self.nth8(),
            self.nth9(),
            self.nth10(),
            self.nth11(),
            self.nth12(),
            self.nth13(),
            self.nth14(),
            self.nth15(),
            self.nth16(),
            self.nth17(),
            self.nth18(),
            self.nth19(),
            self.nth20(),
            self.nth21(),
            self.nth22(),
            self.nth23(),
            self.nth24(),
            self.nth25(),
            self.nth26(),
            self.nth27(),
            self.nth28(),
            self.nth29(),
            self.nth30(),
            self.nth31(),
        ])
    }
}
#[derive(Clone, Copy)]
pub struct Bytes32Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for Bytes32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for Bytes32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for Bytes32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> Bytes32Reader<'r> {
    pub const TOTAL_SIZE: usize = 32;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 32;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn nth2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[2..3])
    }
    pub fn nth3(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[3..4])
    }
    pub fn nth4(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[4..5])
    }
    pub fn nth5(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[5..6])
    }
    pub fn nth6(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[6..7])
    }
    pub fn nth7(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[7..8])
    }
    pub fn nth8(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[8..9])
    }
    pub fn nth9(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[9..10])
    }
    pub fn nth10(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[10..11])
    }
    pub fn nth11(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[11..12])
    }
    pub fn nth12(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[12..13])
    }
    pub fn nth13(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[13..14])
    }
    pub fn nth14(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[14..15])
    }
    pub fn nth15(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[15..16])
    }
    pub fn nth16(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[16..17])
    }
    pub fn nth17(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[17..18])
    }
    pub fn nth18(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[18..19])
    }
    pub fn nth19(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[19..20])
    }
    pub fn nth20(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[20..21])
    }
    pub fn nth21(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[21..22])
    }
    pub fn nth22(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[22..23])
    }
    pub fn nth23(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[23..24])
    }
    pub fn nth24(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[24..25])
    }
    pub fn nth25(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[25..26])
    }
    pub fn nth26(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[26..27])
    }
    pub fn nth27(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[27..28])
    }
    pub fn nth28(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[28..29])
    }
    pub fn nth29(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[29..30])
    }
    pub fn nth30(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[30..31])
    }
    pub fn nth31(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[31..32])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for Bytes32Reader<'r> {
    type Entity = Bytes32;
    const NAME: &'static str = "Bytes32Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        Bytes32Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct Bytes32Builder(pub(crate) [Byte; 32]);
impl ::core::fmt::Debug for Bytes32Builder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for Bytes32Builder {
    fn default() -> Self {
        Bytes32Builder([
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
        ])
    }
}
impl Bytes32Builder {
    pub const TOTAL_SIZE: usize = 32;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 32;
    pub fn set(mut self, v: [Byte; 32]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Byte) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Byte) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Byte) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Byte) -> Self {
        self.0[7] = v;
        self
    }
    pub fn nth8(mut self, v: Byte) -> Self {
        self.0[8] = v;
        self
    }
    pub fn nth9(mut self, v: Byte) -> Self {
        self.0[9] = v;
        self
    }
    pub fn nth10(mut self, v: Byte) -> Self {
        self.0[10] = v;
        self
    }
    pub fn nth11(mut self, v: Byte) -> Self {
        self.0[11] = v;
        self
    }
    pub fn nth12(mut self, v: Byte) -> Self {
        self.0[12] = v;
        self
    }
    pub fn nth13(mut self, v: Byte) -> Self {
        self.0[13] = v;
        self
    }
    pub fn nth14(mut self, v: Byte) -> Self {
        self.0[14] = v;
        self
    }
    pub fn nth15(mut self, v: Byte) -> Self {
        self.0[15] = v;
        self
    }
    pub fn nth16(mut self, v: Byte) -> Self {
        self.0[16] = v;
        self
    }
    pub fn nth17(mut self, v: Byte) -> Self {
        self.0[17] = v;
        self
    }
    pub fn nth18(mut self, v: Byte) -> Self {
        self.0[18] = v;
        self
    }
    pub fn nth19(mut self, v: Byte) -> Self {
        self.0[19] = v;
        self
    }
    pub fn nth20(mut self, v: Byte) -> Self {
        self.0[20] = v;
        self
    }
    pub fn nth21(mut self, v: Byte) -> Self {
        self.0[21] = v;
        self
    }
    pub fn nth22(mut self, v: Byte) -> Self {
        self.0[22] = v;
        self
    }
    pub fn nth23(mut self, v: Byte) -> Self {
        self.0[23] = v;
        self
    }
    pub fn nth24(mut self, v: Byte) -> Self {
        self.0[24] = v;
        self
    }
    pub fn nth25(mut self, v: Byte) -> Self {
        self.0[25] = v;
        self
    }
    pub fn nth26(mut self, v: Byte) -> Self {
        self.0[26] = v;
        self
    }
    pub fn nth27(mut self, v: Byte) -> Self {
        self.0[27] = v;
        self
    }
    pub fn nth28(mut self, v: Byte) -> Self {
        self.0[28] = v;
        self
    }
    pub fn nth29(mut self, v: Byte) -> Self {
        self.0[29] = v;
        self
    }
    pub fn nth30(mut self, v: Byte) -> Self {
        self.0[30] = v;
        self
    }
    pub fn nth31(mut self, v: Byte) -> Self {
        self.0[31] = v;
        self
    }
}
impl molecule::prelude::Builder for Bytes32Builder {
    type Entity = Bytes32;
    const NAME: &'static str = "Bytes32Builder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        writer.write_all(self.0[8].as_slice())?;
        writer.write_all(self.0[9].as_slice())?;
        writer.write_all(self.0[10].as_slice())?;
        writer.write_all(self.0[11].as_slice())?;
        writer.write_all(self.0[12].as_slice())?;
        writer.write_all(self.0[13].as_slice())?;
        writer.write_all(self.0[14].as_slice())?;
        writer.write_all(self.0[15].as_slice())?;
        writer.write_all(self.0[16].as_slice())?;
        writer.write_all(self.0[17].as_slice())?;
        writer.write_all(self.0[18].as_slice())?;
        writer.write_all(self.0[19].as_slice())?;
        writer.write_all(self.0[20].as_slice())?;
        writer.write_all(self.0[21].as_slice())?;
        writer.write_all(self.0[22].as_slice())?;
        writer.write_all(self.0[23].as_slice())?;
        writer.write_all(self.0[24].as_slice())?;
        writer.write_all(self.0[25].as_slice())?;
        writer.write_all(self.0[26].as_slice())?;
        writer.write_all(self.0[27].as_slice())?;
        writer.write_all(self.0[28].as_slice())?;
        writer.write_all(self.0[29].as_slice())?;
        writer.write_all(self.0[30].as_slice())?;
        writer.write_all(self.0[31].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Bytes32::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Bytes(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Bytes {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Bytes {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Bytes {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for Bytes {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        Bytes::new_unchecked(v.into())
    }
}
impl Bytes {
    pub const ITEM_SIZE: usize = 1;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<Byte> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> Byte {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.0.slice(molecule::NUMBER_SIZE..)
    }
    pub fn as_reader<'r>(&'r self) -> BytesReader<'r> {
        BytesReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Bytes {
    type Builder = BytesBuilder;
    const NAME: &'static str = "Bytes";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Bytes(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        BytesReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        BytesReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct BytesReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for BytesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for BytesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for BytesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> BytesReader<'r> {
    pub const ITEM_SIZE: usize = 1;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<ByteReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> ByteReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        &self.as_slice()[molecule::NUMBER_SIZE..]
    }
}
impl<'r> molecule::prelude::Reader<'r> for BytesReader<'r> {
    type Entity = Bytes;
    const NAME: &'static str = "BytesReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        BytesReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct BytesBuilder(pub(crate) Vec<Byte>);
impl BytesBuilder {
    pub const ITEM_SIZE: usize = 1;
    pub fn set(mut self, v: Vec<Byte>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Byte) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = Byte>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
    pub fn replace(&mut self, index: usize, v: Byte) -> Option<Byte> {
        self.0
            .get_mut(index)
            .map(|item| ::core::mem::replace(item, v))
    }
}
impl molecule::prelude::Builder for BytesBuilder {
    type Entity = Bytes;
    const NAME: &'static str = "BytesBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Bytes::new_unchecked(inner.into())
    }
}
pub struct BytesIterator(Bytes, usize, usize);
impl ::core::iter::Iterator for BytesIterator {
    type Item = Byte;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for BytesIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for Bytes {
    type Item = Byte;
    type IntoIter = BytesIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        BytesIterator(self, 0, len)
    }
}
#[derive(Clone)]
pub struct KVPair(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for KVPair {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for KVPair {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for KVPair {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "k", self.k())?;
        write!(f, ", {}: {}", "v", self.v())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for KVPair {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
        ];
        KVPair::new_unchecked(v.into())
    }
}
impl KVPair {
    pub const TOTAL_SIZE: usize = 64;
    pub const FIELD_SIZES: [usize; 2] = [32, 32];
    pub const FIELD_COUNT: usize = 2;
    pub fn k(&self) -> Bytes32 {
        Bytes32::new_unchecked(self.0.slice(0..32))
    }
    pub fn v(&self) -> Bytes32 {
        Bytes32::new_unchecked(self.0.slice(32..64))
    }
    pub fn as_reader<'r>(&'r self) -> KVPairReader<'r> {
        KVPairReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for KVPair {
    type Builder = KVPairBuilder;
    const NAME: &'static str = "KVPair";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        KVPair(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        KVPairReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        KVPairReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().k(self.k()).v(self.v())
    }
}
#[derive(Clone, Copy)]
pub struct KVPairReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for KVPairReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for KVPairReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for KVPairReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "k", self.k())?;
        write!(f, ", {}: {}", "v", self.v())?;
        write!(f, " }}")
    }
}
impl<'r> KVPairReader<'r> {
    pub const TOTAL_SIZE: usize = 64;
    pub const FIELD_SIZES: [usize; 2] = [32, 32];
    pub const FIELD_COUNT: usize = 2;
    pub fn k(&self) -> Bytes32Reader<'r> {
        Bytes32Reader::new_unchecked(&self.as_slice()[0..32])
    }
    pub fn v(&self) -> Bytes32Reader<'r> {
        Bytes32Reader::new_unchecked(&self.as_slice()[32..64])
    }
}
impl<'r> molecule::prelude::Reader<'r> for KVPairReader<'r> {
    type Entity = KVPair;
    const NAME: &'static str = "KVPairReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        KVPairReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct KVPairBuilder {
    pub(crate) k: Bytes32,
    pub(crate) v: Bytes32,
}
impl KVPairBuilder {
    pub const TOTAL_SIZE: usize = 64;
    pub const FIELD_SIZES: [usize; 2] = [32, 32];
    pub const FIELD_COUNT: usize = 2;
    pub fn k(mut self, v: Bytes32) -> Self {
        self.k = v;
        self
    }
    pub fn v(mut self, v: Bytes32) -> Self {
        self.v = v;
        self
    }
}
impl molecule::prelude::Builder for KVPairBuilder {
    type Entity = KVPair;
    const NAME: &'static str = "KVPairBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.k.as_slice())?;
        writer.write_all(self.v.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        KVPair::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct KVPairVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for KVPairVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for KVPairVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for KVPairVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for KVPairVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        KVPairVec::new_unchecked(v.into())
    }
}
impl KVPairVec {
    pub const ITEM_SIZE: usize = 64;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<KVPair> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> KVPair {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        KVPair::new_unchecked(self.0.slice(start..end))
    }
    pub fn as_reader<'r>(&'r self) -> KVPairVecReader<'r> {
        KVPairVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for KVPairVec {
    type Builder = KVPairVecBuilder;
    const NAME: &'static str = "KVPairVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        KVPairVec(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        KVPairVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        KVPairVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct KVPairVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for KVPairVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for KVPairVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for KVPairVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> KVPairVecReader<'r> {
    pub const ITEM_SIZE: usize = 64;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<KVPairReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> KVPairReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        KVPairReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for KVPairVecReader<'r> {
    type Entity = KVPairVec;
    const NAME: &'static str = "KVPairVecReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        KVPairVecReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct KVPairVecBuilder(pub(crate) Vec<KVPair>);
impl KVPairVecBuilder {
    pub const ITEM_SIZE: usize = 64;
    pub fn set(mut self, v: Vec<KVPair>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: KVPair) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = KVPair>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
    pub fn replace(&mut self, index: usize, v: KVPair) -> Option<KVPair> {
        self.0
            .get_mut(index)
            .map(|item| ::core::mem::replace(item, v))
    }
}
impl molecule::prelude::Builder for KVPairVecBuilder {
    type Entity = KVPairVec;
    const NAME: &'static str = "KVPairVecBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        KVPairVec::new_unchecked(inner.into())
    }
}
pub struct KVPairVecIterator(KVPairVec, usize, usize);
impl ::core::iter::Iterator for KVPairVecIterator {
    type Item = KVPair;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for KVPairVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for KVPairVec {
    type Item = KVPair;
    type IntoIter = KVPairVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        KVPairVecIterator(self, 0, len)
    }
}
impl<'r> KVPairVecReader<'r> {
    pub fn iter<'t>(&'t self) -> KVPairVecReaderIterator<'t, 'r> {
        KVPairVecReaderIterator(&self, 0, self.len())
    }
}
pub struct KVPairVecReaderIterator<'t, 'r>(&'t KVPairVecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for KVPairVecReaderIterator<'t, 'r> {
    type Item = KVPairReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for KVPairVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct Registers32(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Registers32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Registers32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Registers32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        write!(f, "{}", self.nth0())?;
        write!(f, ", {}", self.nth1())?;
        write!(f, ", {}", self.nth2())?;
        write!(f, ", {}", self.nth3())?;
        write!(f, ", {}", self.nth4())?;
        write!(f, ", {}", self.nth5())?;
        write!(f, ", {}", self.nth6())?;
        write!(f, ", {}", self.nth7())?;
        write!(f, ", {}", self.nth8())?;
        write!(f, ", {}", self.nth9())?;
        write!(f, ", {}", self.nth10())?;
        write!(f, ", {}", self.nth11())?;
        write!(f, ", {}", self.nth12())?;
        write!(f, ", {}", self.nth13())?;
        write!(f, ", {}", self.nth14())?;
        write!(f, ", {}", self.nth15())?;
        write!(f, ", {}", self.nth16())?;
        write!(f, ", {}", self.nth17())?;
        write!(f, ", {}", self.nth18())?;
        write!(f, ", {}", self.nth19())?;
        write!(f, ", {}", self.nth20())?;
        write!(f, ", {}", self.nth21())?;
        write!(f, ", {}", self.nth22())?;
        write!(f, ", {}", self.nth23())?;
        write!(f, ", {}", self.nth24())?;
        write!(f, ", {}", self.nth25())?;
        write!(f, ", {}", self.nth26())?;
        write!(f, ", {}", self.nth27())?;
        write!(f, ", {}", self.nth28())?;
        write!(f, ", {}", self.nth29())?;
        write!(f, ", {}", self.nth30())?;
        write!(f, ", {}", self.nth31())?;
        write!(f, "]")
    }
}
impl ::core::default::Default for Registers32 {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        Registers32::new_unchecked(v.into())
    }
}
impl Registers32 {
    pub const TOTAL_SIZE: usize = 128;
    pub const ITEM_SIZE: usize = 4;
    pub const ITEM_COUNT: usize = 32;
    pub fn nth0(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(0..4))
    }
    pub fn nth1(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(4..8))
    }
    pub fn nth2(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(8..12))
    }
    pub fn nth3(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(12..16))
    }
    pub fn nth4(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(16..20))
    }
    pub fn nth5(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(20..24))
    }
    pub fn nth6(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(24..28))
    }
    pub fn nth7(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(28..32))
    }
    pub fn nth8(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(32..36))
    }
    pub fn nth9(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(36..40))
    }
    pub fn nth10(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(40..44))
    }
    pub fn nth11(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(44..48))
    }
    pub fn nth12(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(48..52))
    }
    pub fn nth13(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(52..56))
    }
    pub fn nth14(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(56..60))
    }
    pub fn nth15(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(60..64))
    }
    pub fn nth16(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(64..68))
    }
    pub fn nth17(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(68..72))
    }
    pub fn nth18(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(72..76))
    }
    pub fn nth19(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(76..80))
    }
    pub fn nth20(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(80..84))
    }
    pub fn nth21(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(84..88))
    }
    pub fn nth22(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(88..92))
    }
    pub fn nth23(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(92..96))
    }
    pub fn nth24(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(96..100))
    }
    pub fn nth25(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(100..104))
    }
    pub fn nth26(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(104..108))
    }
    pub fn nth27(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(108..112))
    }
    pub fn nth28(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(112..116))
    }
    pub fn nth29(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(116..120))
    }
    pub fn nth30(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(120..124))
    }
    pub fn nth31(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(124..128))
    }
    pub fn as_reader<'r>(&'r self) -> Registers32Reader<'r> {
        Registers32Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Registers32 {
    type Builder = Registers32Builder;
    const NAME: &'static str = "Registers32";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Registers32(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Registers32Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Registers32Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([
            self.nth0(),
            self.nth1(),
            self.nth2(),
            self.nth3(),
            self.nth4(),
            self.nth5(),
            self.nth6(),
            self.nth7(),
            self.nth8(),
            self.nth9(),
            self.nth10(),
            self.nth11(),
            self.nth12(),
            self.nth13(),
            self.nth14(),
            self.nth15(),
            self.nth16(),
            self.nth17(),
            self.nth18(),
            self.nth19(),
            self.nth20(),
            self.nth21(),
            self.nth22(),
            self.nth23(),
            self.nth24(),
            self.nth25(),
            self.nth26(),
            self.nth27(),
            self.nth28(),
            self.nth29(),
            self.nth30(),
            self.nth31(),
        ])
    }
}
#[derive(Clone, Copy)]
pub struct Registers32Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for Registers32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for Registers32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for Registers32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        write!(f, "{}", self.nth0())?;
        write!(f, ", {}", self.nth1())?;
        write!(f, ", {}", self.nth2())?;
        write!(f, ", {}", self.nth3())?;
        write!(f, ", {}", self.nth4())?;
        write!(f, ", {}", self.nth5())?;
        write!(f, ", {}", self.nth6())?;
        write!(f, ", {}", self.nth7())?;
        write!(f, ", {}", self.nth8())?;
        write!(f, ", {}", self.nth9())?;
        write!(f, ", {}", self.nth10())?;
        write!(f, ", {}", self.nth11())?;
        write!(f, ", {}", self.nth12())?;
        write!(f, ", {}", self.nth13())?;
        write!(f, ", {}", self.nth14())?;
        write!(f, ", {}", self.nth15())?;
        write!(f, ", {}", self.nth16())?;
        write!(f, ", {}", self.nth17())?;
        write!(f, ", {}", self.nth18())?;
        write!(f, ", {}", self.nth19())?;
        write!(f, ", {}", self.nth20())?;
        write!(f, ", {}", self.nth21())?;
        write!(f, ", {}", self.nth22())?;
        write!(f, ", {}", self.nth23())?;
        write!(f, ", {}", self.nth24())?;
        write!(f, ", {}", self.nth25())?;
        write!(f, ", {}", self.nth26())?;
        write!(f, ", {}", self.nth27())?;
        write!(f, ", {}", self.nth28())?;
        write!(f, ", {}", self.nth29())?;
        write!(f, ", {}", self.nth30())?;
        write!(f, ", {}", self.nth31())?;
        write!(f, "]")
    }
}
impl<'r> Registers32Reader<'r> {
    pub const TOTAL_SIZE: usize = 128;
    pub const ITEM_SIZE: usize = 4;
    pub const ITEM_COUNT: usize = 32;
    pub fn nth0(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[0..4])
    }
    pub fn nth1(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[4..8])
    }
    pub fn nth2(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[8..12])
    }
    pub fn nth3(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[12..16])
    }
    pub fn nth4(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[16..20])
    }
    pub fn nth5(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[20..24])
    }
    pub fn nth6(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[24..28])
    }
    pub fn nth7(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[28..32])
    }
    pub fn nth8(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[32..36])
    }
    pub fn nth9(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[36..40])
    }
    pub fn nth10(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[40..44])
    }
    pub fn nth11(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[44..48])
    }
    pub fn nth12(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[48..52])
    }
    pub fn nth13(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[52..56])
    }
    pub fn nth14(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[56..60])
    }
    pub fn nth15(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[60..64])
    }
    pub fn nth16(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[64..68])
    }
    pub fn nth17(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[68..72])
    }
    pub fn nth18(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[72..76])
    }
    pub fn nth19(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[76..80])
    }
    pub fn nth20(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[80..84])
    }
    pub fn nth21(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[84..88])
    }
    pub fn nth22(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[88..92])
    }
    pub fn nth23(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[92..96])
    }
    pub fn nth24(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[96..100])
    }
    pub fn nth25(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[100..104])
    }
    pub fn nth26(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[104..108])
    }
    pub fn nth27(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[108..112])
    }
    pub fn nth28(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[112..116])
    }
    pub fn nth29(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[116..120])
    }
    pub fn nth30(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[120..124])
    }
    pub fn nth31(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[124..128])
    }
}
impl<'r> molecule::prelude::Reader<'r> for Registers32Reader<'r> {
    type Entity = Registers32;
    const NAME: &'static str = "Registers32Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        Registers32Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct Registers32Builder(pub(crate) [Uint32; 32]);
impl ::core::fmt::Debug for Registers32Builder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for Registers32Builder {
    fn default() -> Self {
        Registers32Builder([
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
            Uint32::default(),
        ])
    }
}
impl Registers32Builder {
    pub const TOTAL_SIZE: usize = 128;
    pub const ITEM_SIZE: usize = 4;
    pub const ITEM_COUNT: usize = 32;
    pub fn set(mut self, v: [Uint32; 32]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Uint32) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Uint32) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Uint32) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Uint32) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Uint32) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Uint32) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Uint32) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Uint32) -> Self {
        self.0[7] = v;
        self
    }
    pub fn nth8(mut self, v: Uint32) -> Self {
        self.0[8] = v;
        self
    }
    pub fn nth9(mut self, v: Uint32) -> Self {
        self.0[9] = v;
        self
    }
    pub fn nth10(mut self, v: Uint32) -> Self {
        self.0[10] = v;
        self
    }
    pub fn nth11(mut self, v: Uint32) -> Self {
        self.0[11] = v;
        self
    }
    pub fn nth12(mut self, v: Uint32) -> Self {
        self.0[12] = v;
        self
    }
    pub fn nth13(mut self, v: Uint32) -> Self {
        self.0[13] = v;
        self
    }
    pub fn nth14(mut self, v: Uint32) -> Self {
        self.0[14] = v;
        self
    }
    pub fn nth15(mut self, v: Uint32) -> Self {
        self.0[15] = v;
        self
    }
    pub fn nth16(mut self, v: Uint32) -> Self {
        self.0[16] = v;
        self
    }
    pub fn nth17(mut self, v: Uint32) -> Self {
        self.0[17] = v;
        self
    }
    pub fn nth18(mut self, v: Uint32) -> Self {
        self.0[18] = v;
        self
    }
    pub fn nth19(mut self, v: Uint32) -> Self {
        self.0[19] = v;
        self
    }
    pub fn nth20(mut self, v: Uint32) -> Self {
        self.0[20] = v;
        self
    }
    pub fn nth21(mut self, v: Uint32) -> Self {
        self.0[21] = v;
        self
    }
    pub fn nth22(mut self, v: Uint32) -> Self {
        self.0[22] = v;
        self
    }
    pub fn nth23(mut self, v: Uint32) -> Self {
        self.0[23] = v;
        self
    }
    pub fn nth24(mut self, v: Uint32) -> Self {
        self.0[24] = v;
        self
    }
    pub fn nth25(mut self, v: Uint32) -> Self {
        self.0[25] = v;
        self
    }
    pub fn nth26(mut self, v: Uint32) -> Self {
        self.0[26] = v;
        self
    }
    pub fn nth27(mut self, v: Uint32) -> Self {
        self.0[27] = v;
        self
    }
    pub fn nth28(mut self, v: Uint32) -> Self {
        self.0[28] = v;
        self
    }
    pub fn nth29(mut self, v: Uint32) -> Self {
        self.0[29] = v;
        self
    }
    pub fn nth30(mut self, v: Uint32) -> Self {
        self.0[30] = v;
        self
    }
    pub fn nth31(mut self, v: Uint32) -> Self {
        self.0[31] = v;
        self
    }
}
impl molecule::prelude::Builder for Registers32Builder {
    type Entity = Registers32;
    const NAME: &'static str = "Registers32Builder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        writer.write_all(self.0[8].as_slice())?;
        writer.write_all(self.0[9].as_slice())?;
        writer.write_all(self.0[10].as_slice())?;
        writer.write_all(self.0[11].as_slice())?;
        writer.write_all(self.0[12].as_slice())?;
        writer.write_all(self.0[13].as_slice())?;
        writer.write_all(self.0[14].as_slice())?;
        writer.write_all(self.0[15].as_slice())?;
        writer.write_all(self.0[16].as_slice())?;
        writer.write_all(self.0[17].as_slice())?;
        writer.write_all(self.0[18].as_slice())?;
        writer.write_all(self.0[19].as_slice())?;
        writer.write_all(self.0[20].as_slice())?;
        writer.write_all(self.0[21].as_slice())?;
        writer.write_all(self.0[22].as_slice())?;
        writer.write_all(self.0[23].as_slice())?;
        writer.write_all(self.0[24].as_slice())?;
        writer.write_all(self.0[25].as_slice())?;
        writer.write_all(self.0[26].as_slice())?;
        writer.write_all(self.0[27].as_slice())?;
        writer.write_all(self.0[28].as_slice())?;
        writer.write_all(self.0[29].as_slice())?;
        writer.write_all(self.0[30].as_slice())?;
        writer.write_all(self.0[31].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Registers32::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Registers64(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Registers64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Registers64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Registers64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        write!(f, "{}", self.nth0())?;
        write!(f, ", {}", self.nth1())?;
        write!(f, ", {}", self.nth2())?;
        write!(f, ", {}", self.nth3())?;
        write!(f, ", {}", self.nth4())?;
        write!(f, ", {}", self.nth5())?;
        write!(f, ", {}", self.nth6())?;
        write!(f, ", {}", self.nth7())?;
        write!(f, ", {}", self.nth8())?;
        write!(f, ", {}", self.nth9())?;
        write!(f, ", {}", self.nth10())?;
        write!(f, ", {}", self.nth11())?;
        write!(f, ", {}", self.nth12())?;
        write!(f, ", {}", self.nth13())?;
        write!(f, ", {}", self.nth14())?;
        write!(f, ", {}", self.nth15())?;
        write!(f, ", {}", self.nth16())?;
        write!(f, ", {}", self.nth17())?;
        write!(f, ", {}", self.nth18())?;
        write!(f, ", {}", self.nth19())?;
        write!(f, ", {}", self.nth20())?;
        write!(f, ", {}", self.nth21())?;
        write!(f, ", {}", self.nth22())?;
        write!(f, ", {}", self.nth23())?;
        write!(f, ", {}", self.nth24())?;
        write!(f, ", {}", self.nth25())?;
        write!(f, ", {}", self.nth26())?;
        write!(f, ", {}", self.nth27())?;
        write!(f, ", {}", self.nth28())?;
        write!(f, ", {}", self.nth29())?;
        write!(f, ", {}", self.nth30())?;
        write!(f, ", {}", self.nth31())?;
        write!(f, "]")
    }
}
impl ::core::default::Default for Registers64 {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        Registers64::new_unchecked(v.into())
    }
}
impl Registers64 {
    pub const TOTAL_SIZE: usize = 256;
    pub const ITEM_SIZE: usize = 8;
    pub const ITEM_COUNT: usize = 32;
    pub fn nth0(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(0..8))
    }
    pub fn nth1(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(8..16))
    }
    pub fn nth2(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(16..24))
    }
    pub fn nth3(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(24..32))
    }
    pub fn nth4(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(32..40))
    }
    pub fn nth5(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(40..48))
    }
    pub fn nth6(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(48..56))
    }
    pub fn nth7(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(56..64))
    }
    pub fn nth8(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(64..72))
    }
    pub fn nth9(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(72..80))
    }
    pub fn nth10(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(80..88))
    }
    pub fn nth11(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(88..96))
    }
    pub fn nth12(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(96..104))
    }
    pub fn nth13(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(104..112))
    }
    pub fn nth14(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(112..120))
    }
    pub fn nth15(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(120..128))
    }
    pub fn nth16(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(128..136))
    }
    pub fn nth17(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(136..144))
    }
    pub fn nth18(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(144..152))
    }
    pub fn nth19(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(152..160))
    }
    pub fn nth20(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(160..168))
    }
    pub fn nth21(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(168..176))
    }
    pub fn nth22(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(176..184))
    }
    pub fn nth23(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(184..192))
    }
    pub fn nth24(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(192..200))
    }
    pub fn nth25(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(200..208))
    }
    pub fn nth26(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(208..216))
    }
    pub fn nth27(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(216..224))
    }
    pub fn nth28(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(224..232))
    }
    pub fn nth29(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(232..240))
    }
    pub fn nth30(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(240..248))
    }
    pub fn nth31(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(248..256))
    }
    pub fn as_reader<'r>(&'r self) -> Registers64Reader<'r> {
        Registers64Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Registers64 {
    type Builder = Registers64Builder;
    const NAME: &'static str = "Registers64";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Registers64(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Registers64Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Registers64Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([
            self.nth0(),
            self.nth1(),
            self.nth2(),
            self.nth3(),
            self.nth4(),
            self.nth5(),
            self.nth6(),
            self.nth7(),
            self.nth8(),
            self.nth9(),
            self.nth10(),
            self.nth11(),
            self.nth12(),
            self.nth13(),
            self.nth14(),
            self.nth15(),
            self.nth16(),
            self.nth17(),
            self.nth18(),
            self.nth19(),
            self.nth20(),
            self.nth21(),
            self.nth22(),
            self.nth23(),
            self.nth24(),
            self.nth25(),
            self.nth26(),
            self.nth27(),
            self.nth28(),
            self.nth29(),
            self.nth30(),
            self.nth31(),
        ])
    }
}
#[derive(Clone, Copy)]
pub struct Registers64Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for Registers64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for Registers64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for Registers64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        write!(f, "{}", self.nth0())?;
        write!(f, ", {}", self.nth1())?;
        write!(f, ", {}", self.nth2())?;
        write!(f, ", {}", self.nth3())?;
        write!(f, ", {}", self.nth4())?;
        write!(f, ", {}", self.nth5())?;
        write!(f, ", {}", self.nth6())?;
        write!(f, ", {}", self.nth7())?;
        write!(f, ", {}", self.nth8())?;
        write!(f, ", {}", self.nth9())?;
        write!(f, ", {}", self.nth10())?;
        write!(f, ", {}", self.nth11())?;
        write!(f, ", {}", self.nth12())?;
        write!(f, ", {}", self.nth13())?;
        write!(f, ", {}", self.nth14())?;
        write!(f, ", {}", self.nth15())?;
        write!(f, ", {}", self.nth16())?;
        write!(f, ", {}", self.nth17())?;
        write!(f, ", {}", self.nth18())?;
        write!(f, ", {}", self.nth19())?;
        write!(f, ", {}", self.nth20())?;
        write!(f, ", {}", self.nth21())?;
        write!(f, ", {}", self.nth22())?;
        write!(f, ", {}", self.nth23())?;
        write!(f, ", {}", self.nth24())?;
        write!(f, ", {}", self.nth25())?;
        write!(f, ", {}", self.nth26())?;
        write!(f, ", {}", self.nth27())?;
        write!(f, ", {}", self.nth28())?;
        write!(f, ", {}", self.nth29())?;
        write!(f, ", {}", self.nth30())?;
        write!(f, ", {}", self.nth31())?;
        write!(f, "]")
    }
}
impl<'r> Registers64Reader<'r> {
    pub const TOTAL_SIZE: usize = 256;
    pub const ITEM_SIZE: usize = 8;
    pub const ITEM_COUNT: usize = 32;
    pub fn nth0(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[0..8])
    }
    pub fn nth1(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[8..16])
    }
    pub fn nth2(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[16..24])
    }
    pub fn nth3(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[24..32])
    }
    pub fn nth4(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[32..40])
    }
    pub fn nth5(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[40..48])
    }
    pub fn nth6(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[48..56])
    }
    pub fn nth7(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[56..64])
    }
    pub fn nth8(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[64..72])
    }
    pub fn nth9(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[72..80])
    }
    pub fn nth10(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[80..88])
    }
    pub fn nth11(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[88..96])
    }
    pub fn nth12(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[96..104])
    }
    pub fn nth13(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[104..112])
    }
    pub fn nth14(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[112..120])
    }
    pub fn nth15(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[120..128])
    }
    pub fn nth16(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[128..136])
    }
    pub fn nth17(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[136..144])
    }
    pub fn nth18(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[144..152])
    }
    pub fn nth19(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[152..160])
    }
    pub fn nth20(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[160..168])
    }
    pub fn nth21(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[168..176])
    }
    pub fn nth22(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[176..184])
    }
    pub fn nth23(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[184..192])
    }
    pub fn nth24(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[192..200])
    }
    pub fn nth25(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[200..208])
    }
    pub fn nth26(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[208..216])
    }
    pub fn nth27(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[216..224])
    }
    pub fn nth28(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[224..232])
    }
    pub fn nth29(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[232..240])
    }
    pub fn nth30(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[240..248])
    }
    pub fn nth31(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[248..256])
    }
}
impl<'r> molecule::prelude::Reader<'r> for Registers64Reader<'r> {
    type Entity = Registers64;
    const NAME: &'static str = "Registers64Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        Registers64Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct Registers64Builder(pub(crate) [Uint64; 32]);
impl ::core::fmt::Debug for Registers64Builder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for Registers64Builder {
    fn default() -> Self {
        Registers64Builder([
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
            Uint64::default(),
        ])
    }
}
impl Registers64Builder {
    pub const TOTAL_SIZE: usize = 256;
    pub const ITEM_SIZE: usize = 8;
    pub const ITEM_COUNT: usize = 32;
    pub fn set(mut self, v: [Uint64; 32]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Uint64) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Uint64) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Uint64) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Uint64) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Uint64) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Uint64) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Uint64) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Uint64) -> Self {
        self.0[7] = v;
        self
    }
    pub fn nth8(mut self, v: Uint64) -> Self {
        self.0[8] = v;
        self
    }
    pub fn nth9(mut self, v: Uint64) -> Self {
        self.0[9] = v;
        self
    }
    pub fn nth10(mut self, v: Uint64) -> Self {
        self.0[10] = v;
        self
    }
    pub fn nth11(mut self, v: Uint64) -> Self {
        self.0[11] = v;
        self
    }
    pub fn nth12(mut self, v: Uint64) -> Self {
        self.0[12] = v;
        self
    }
    pub fn nth13(mut self, v: Uint64) -> Self {
        self.0[13] = v;
        self
    }
    pub fn nth14(mut self, v: Uint64) -> Self {
        self.0[14] = v;
        self
    }
    pub fn nth15(mut self, v: Uint64) -> Self {
        self.0[15] = v;
        self
    }
    pub fn nth16(mut self, v: Uint64) -> Self {
        self.0[16] = v;
        self
    }
    pub fn nth17(mut self, v: Uint64) -> Self {
        self.0[17] = v;
        self
    }
    pub fn nth18(mut self, v: Uint64) -> Self {
        self.0[18] = v;
        self
    }
    pub fn nth19(mut self, v: Uint64) -> Self {
        self.0[19] = v;
        self
    }
    pub fn nth20(mut self, v: Uint64) -> Self {
        self.0[20] = v;
        self
    }
    pub fn nth21(mut self, v: Uint64) -> Self {
        self.0[21] = v;
        self
    }
    pub fn nth22(mut self, v: Uint64) -> Self {
        self.0[22] = v;
        self
    }
    pub fn nth23(mut self, v: Uint64) -> Self {
        self.0[23] = v;
        self
    }
    pub fn nth24(mut self, v: Uint64) -> Self {
        self.0[24] = v;
        self
    }
    pub fn nth25(mut self, v: Uint64) -> Self {
        self.0[25] = v;
        self
    }
    pub fn nth26(mut self, v: Uint64) -> Self {
        self.0[26] = v;
        self
    }
    pub fn nth27(mut self, v: Uint64) -> Self {
        self.0[27] = v;
        self
    }
    pub fn nth28(mut self, v: Uint64) -> Self {
        self.0[28] = v;
        self
    }
    pub fn nth29(mut self, v: Uint64) -> Self {
        self.0[29] = v;
        self
    }
    pub fn nth30(mut self, v: Uint64) -> Self {
        self.0[30] = v;
        self
    }
    pub fn nth31(mut self, v: Uint64) -> Self {
        self.0[31] = v;
        self
    }
}
impl molecule::prelude::Builder for Registers64Builder {
    type Entity = Registers64;
    const NAME: &'static str = "Registers64Builder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        writer.write_all(self.0[8].as_slice())?;
        writer.write_all(self.0[9].as_slice())?;
        writer.write_all(self.0[10].as_slice())?;
        writer.write_all(self.0[11].as_slice())?;
        writer.write_all(self.0[12].as_slice())?;
        writer.write_all(self.0[13].as_slice())?;
        writer.write_all(self.0[14].as_slice())?;
        writer.write_all(self.0[15].as_slice())?;
        writer.write_all(self.0[16].as_slice())?;
        writer.write_all(self.0[17].as_slice())?;
        writer.write_all(self.0[18].as_slice())?;
        writer.write_all(self.0[19].as_slice())?;
        writer.write_all(self.0[20].as_slice())?;
        writer.write_all(self.0[21].as_slice())?;
        writer.write_all(self.0[22].as_slice())?;
        writer.write_all(self.0[23].as_slice())?;
        writer.write_all(self.0[24].as_slice())?;
        writer.write_all(self.0[25].as_slice())?;
        writer.write_all(self.0[26].as_slice())?;
        writer.write_all(self.0[27].as_slice())?;
        writer.write_all(self.0[28].as_slice())?;
        writer.write_all(self.0[29].as_slice())?;
        writer.write_all(self.0[30].as_slice())?;
        writer.write_all(self.0[31].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Registers64::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct MemoryProof(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for MemoryProof {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for MemoryProof {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for MemoryProof {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "memory_size", self.memory_size())?;
        write!(f, ", {}: {}", "root", self.root())?;
        write!(f, ", {}: {}", "kvs", self.kvs())?;
        write!(f, ", {}: {}", "merkle_proof", self.merkle_proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for MemoryProof {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            68, 0, 0, 0, 20, 0, 0, 0, 28, 0, 0, 0, 60, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        MemoryProof::new_unchecked(v.into())
    }
}
impl MemoryProof {
    pub const FIELD_COUNT: usize = 4;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn memory_size(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn root(&self) -> Bytes32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Bytes32::new_unchecked(self.0.slice(start..end))
    }
    pub fn kvs(&self) -> KVPairVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        KVPairVec::new_unchecked(self.0.slice(start..end))
    }
    pub fn merkle_proof(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[20..]) as usize;
            Bytes::new_unchecked(self.0.slice(start..end))
        } else {
            Bytes::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> MemoryProofReader<'r> {
        MemoryProofReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for MemoryProof {
    type Builder = MemoryProofBuilder;
    const NAME: &'static str = "MemoryProof";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        MemoryProof(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        MemoryProofReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        MemoryProofReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .memory_size(self.memory_size())
            .root(self.root())
            .kvs(self.kvs())
            .merkle_proof(self.merkle_proof())
    }
}
#[derive(Clone, Copy)]
pub struct MemoryProofReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for MemoryProofReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for MemoryProofReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for MemoryProofReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "memory_size", self.memory_size())?;
        write!(f, ", {}: {}", "root", self.root())?;
        write!(f, ", {}: {}", "kvs", self.kvs())?;
        write!(f, ", {}: {}", "merkle_proof", self.merkle_proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> MemoryProofReader<'r> {
    pub const FIELD_COUNT: usize = 4;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn memory_size(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn root(&self) -> Bytes32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Bytes32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn kvs(&self) -> KVPairVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        KVPairVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn merkle_proof(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[20..]) as usize;
            BytesReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            BytesReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for MemoryProofReader<'r> {
    type Entity = MemoryProof;
    const NAME: &'static str = "MemoryProofReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        MemoryProofReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Uint64Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Bytes32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        KVPairVecReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        BytesReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct MemoryProofBuilder {
    pub(crate) memory_size: Uint64,
    pub(crate) root: Bytes32,
    pub(crate) kvs: KVPairVec,
    pub(crate) merkle_proof: Bytes,
}
impl MemoryProofBuilder {
    pub const FIELD_COUNT: usize = 4;
    pub fn memory_size(mut self, v: Uint64) -> Self {
        self.memory_size = v;
        self
    }
    pub fn root(mut self, v: Bytes32) -> Self {
        self.root = v;
        self
    }
    pub fn kvs(mut self, v: KVPairVec) -> Self {
        self.kvs = v;
        self
    }
    pub fn merkle_proof(mut self, v: Bytes) -> Self {
        self.merkle_proof = v;
        self
    }
}
impl molecule::prelude::Builder for MemoryProofBuilder {
    type Entity = MemoryProof;
    const NAME: &'static str = "MemoryProofBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.memory_size.as_slice().len()
            + self.root.as_slice().len()
            + self.kvs.as_slice().len()
            + self.merkle_proof.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.memory_size.as_slice().len();
        offsets.push(total_size);
        total_size += self.root.as_slice().len();
        offsets.push(total_size);
        total_size += self.kvs.as_slice().len();
        offsets.push(total_size);
        total_size += self.merkle_proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.memory_size.as_slice())?;
        writer.write_all(self.root.as_slice())?;
        writer.write_all(self.kvs.as_slice())?;
        writer.write_all(self.merkle_proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        MemoryProof::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct StepProof32(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for StepProof32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for StepProof32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for StepProof32 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "step_num", self.step_num())?;
        write!(f, ", {}: {}", "registers", self.registers())?;
        write!(f, ", {}: {}", "pc", self.pc())?;
        write!(f, ", {}: {}", "next_pc", self.next_pc())?;
        write!(f, ", {}: {}", "memory", self.memory())?;
        write!(f, ", {}: {}", "cycles", self.cycles())?;
        write!(f, ", {}: {}", "max_cycles", self.max_cycles())?;
        write!(f, ", {}: {}", "running", self.running())?;
        write!(f, ", {}: {}", "isa", self.isa())?;
        write!(f, ", {}: {}", "version", self.version())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for StepProof32 {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            22, 1, 0, 0, 44, 0, 0, 0, 52, 0, 0, 0, 180, 0, 0, 0, 184, 0, 0, 0, 188, 0, 0, 0, 0, 1,
            0, 0, 8, 1, 0, 0, 16, 1, 0, 0, 17, 1, 0, 0, 18, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 20, 0, 0, 0, 28, 0,
            0, 0, 60, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        StepProof32::new_unchecked(v.into())
    }
}
impl StepProof32 {
    pub const FIELD_COUNT: usize = 10;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn step_num(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn registers(&self) -> Registers32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Registers32::new_unchecked(self.0.slice(start..end))
    }
    pub fn pc(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }
    pub fn next_pc(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Uint32::new_unchecked(self.0.slice(start..end))
    }
    pub fn memory(&self) -> MemoryProof {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        MemoryProof::new_unchecked(self.0.slice(start..end))
    }
    pub fn cycles(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn max_cycles(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn running(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn isa(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn version(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[44..]) as usize;
            Uint32::new_unchecked(self.0.slice(start..end))
        } else {
            Uint32::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> StepProof32Reader<'r> {
        StepProof32Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for StepProof32 {
    type Builder = StepProof32Builder;
    const NAME: &'static str = "StepProof32";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        StepProof32(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        StepProof32Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        StepProof32Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .step_num(self.step_num())
            .registers(self.registers())
            .pc(self.pc())
            .next_pc(self.next_pc())
            .memory(self.memory())
            .cycles(self.cycles())
            .max_cycles(self.max_cycles())
            .running(self.running())
            .isa(self.isa())
            .version(self.version())
    }
}
#[derive(Clone, Copy)]
pub struct StepProof32Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for StepProof32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for StepProof32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for StepProof32Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "step_num", self.step_num())?;
        write!(f, ", {}: {}", "registers", self.registers())?;
        write!(f, ", {}: {}", "pc", self.pc())?;
        write!(f, ", {}: {}", "next_pc", self.next_pc())?;
        write!(f, ", {}: {}", "memory", self.memory())?;
        write!(f, ", {}: {}", "cycles", self.cycles())?;
        write!(f, ", {}: {}", "max_cycles", self.max_cycles())?;
        write!(f, ", {}: {}", "running", self.running())?;
        write!(f, ", {}: {}", "isa", self.isa())?;
        write!(f, ", {}: {}", "version", self.version())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> StepProof32Reader<'r> {
    pub const FIELD_COUNT: usize = 10;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn step_num(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn registers(&self) -> Registers32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Registers32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn pc(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn next_pc(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn memory(&self) -> MemoryProofReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        MemoryProofReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn cycles(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn max_cycles(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn running(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn isa(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn version(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[44..]) as usize;
            Uint32Reader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Uint32Reader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for StepProof32Reader<'r> {
    type Entity = StepProof32;
    const NAME: &'static str = "StepProof32Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        StepProof32Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Uint64Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Registers32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Uint32Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Uint32Reader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        MemoryProofReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Uint64Reader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        Uint64Reader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        ByteReader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        ByteReader::verify(&slice[offsets[8]..offsets[9]], compatible)?;
        Uint32Reader::verify(&slice[offsets[9]..offsets[10]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct StepProof32Builder {
    pub(crate) step_num: Uint64,
    pub(crate) registers: Registers32,
    pub(crate) pc: Uint32,
    pub(crate) next_pc: Uint32,
    pub(crate) memory: MemoryProof,
    pub(crate) cycles: Uint64,
    pub(crate) max_cycles: Uint64,
    pub(crate) running: Byte,
    pub(crate) isa: Byte,
    pub(crate) version: Uint32,
}
impl StepProof32Builder {
    pub const FIELD_COUNT: usize = 10;
    pub fn step_num(mut self, v: Uint64) -> Self {
        self.step_num = v;
        self
    }
    pub fn registers(mut self, v: Registers32) -> Self {
        self.registers = v;
        self
    }
    pub fn pc(mut self, v: Uint32) -> Self {
        self.pc = v;
        self
    }
    pub fn next_pc(mut self, v: Uint32) -> Self {
        self.next_pc = v;
        self
    }
    pub fn memory(mut self, v: MemoryProof) -> Self {
        self.memory = v;
        self
    }
    pub fn cycles(mut self, v: Uint64) -> Self {
        self.cycles = v;
        self
    }
    pub fn max_cycles(mut self, v: Uint64) -> Self {
        self.max_cycles = v;
        self
    }
    pub fn running(mut self, v: Byte) -> Self {
        self.running = v;
        self
    }
    pub fn isa(mut self, v: Byte) -> Self {
        self.isa = v;
        self
    }
    pub fn version(mut self, v: Uint32) -> Self {
        self.version = v;
        self
    }
}
impl molecule::prelude::Builder for StepProof32Builder {
    type Entity = StepProof32;
    const NAME: &'static str = "StepProof32Builder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.step_num.as_slice().len()
            + self.registers.as_slice().len()
            + self.pc.as_slice().len()
            + self.next_pc.as_slice().len()
            + self.memory.as_slice().len()
            + self.cycles.as_slice().len()
            + self.max_cycles.as_slice().len()
            + self.running.as_slice().len()
            + self.isa.as_slice().len()
            + self.version.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.step_num.as_slice().len();
        offsets.push(total_size);
        total_size += self.registers.as_slice().len();
        offsets.push(total_size);
        total_size += self.pc.as_slice().len();
        offsets.push(total_size);
        total_size += self.next_pc.as_slice().len();
        offsets.push(total_size);
        total_size += self.memory.as_slice().len();
        offsets.push(total_size);
        total_size += self.cycles.as_slice().len();
        offsets.push(total_size);
        total_size += self.max_cycles.as_slice().len();
        offsets.push(total_size);
        total_size += self.running.as_slice().len();
        offsets.push(total_size);
        total_size += self.isa.as_slice().len();
        offsets.push(total_size);
        total_size += self.version.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.step_num.as_slice())?;
        writer.write_all(self.registers.as_slice())?;
        writer.write_all(self.pc.as_slice())?;
        writer.write_all(self.next_pc.as_slice())?;
        writer.write_all(self.memory.as_slice())?;
        writer.write_all(self.cycles.as_slice())?;
        writer.write_all(self.max_cycles.as_slice())?;
        writer.write_all(self.running.as_slice())?;
        writer.write_all(self.isa.as_slice())?;
        writer.write_all(self.version.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        StepProof32::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct StepProof64(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for StepProof64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for StepProof64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for StepProof64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "step_num", self.step_num())?;
        write!(f, ", {}: {}", "registers", self.registers())?;
        write!(f, ", {}: {}", "pc", self.pc())?;
        write!(f, ", {}: {}", "next_pc", self.next_pc())?;
        write!(f, ", {}: {}", "memory", self.memory())?;
        write!(f, ", {}: {}", "cycles", self.cycles())?;
        write!(f, ", {}: {}", "max_cycles", self.max_cycles())?;
        write!(f, ", {}: {}", "running", self.running())?;
        write!(f, ", {}: {}", "isa", self.isa())?;
        write!(f, ", {}: {}", "version", self.version())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for StepProof64 {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            158, 1, 0, 0, 44, 0, 0, 0, 52, 0, 0, 0, 52, 1, 0, 0, 60, 1, 0, 0, 68, 1, 0, 0, 136, 1,
            0, 0, 144, 1, 0, 0, 152, 1, 0, 0, 153, 1, 0, 0, 154, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 20, 0, 0, 0, 28, 0, 0, 0, 60, 0, 0, 0,
            64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        StepProof64::new_unchecked(v.into())
    }
}
impl StepProof64 {
    pub const FIELD_COUNT: usize = 10;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn step_num(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn registers(&self) -> Registers64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Registers64::new_unchecked(self.0.slice(start..end))
    }
    pub fn pc(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn next_pc(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn memory(&self) -> MemoryProof {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        MemoryProof::new_unchecked(self.0.slice(start..end))
    }
    pub fn cycles(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn max_cycles(&self) -> Uint64 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Uint64::new_unchecked(self.0.slice(start..end))
    }
    pub fn running(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn isa(&self) -> Byte {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        Byte::new_unchecked(self.0.slice(start..end))
    }
    pub fn version(&self) -> Uint32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[44..]) as usize;
            Uint32::new_unchecked(self.0.slice(start..end))
        } else {
            Uint32::new_unchecked(self.0.slice(start..))
        }
    }
    pub fn as_reader<'r>(&'r self) -> StepProof64Reader<'r> {
        StepProof64Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for StepProof64 {
    type Builder = StepProof64Builder;
    const NAME: &'static str = "StepProof64";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        StepProof64(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        StepProof64Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        StepProof64Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .step_num(self.step_num())
            .registers(self.registers())
            .pc(self.pc())
            .next_pc(self.next_pc())
            .memory(self.memory())
            .cycles(self.cycles())
            .max_cycles(self.max_cycles())
            .running(self.running())
            .isa(self.isa())
            .version(self.version())
    }
}
#[derive(Clone, Copy)]
pub struct StepProof64Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for StepProof64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for StepProof64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for StepProof64Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "step_num", self.step_num())?;
        write!(f, ", {}: {}", "registers", self.registers())?;
        write!(f, ", {}: {}", "pc", self.pc())?;
        write!(f, ", {}: {}", "next_pc", self.next_pc())?;
        write!(f, ", {}: {}", "memory", self.memory())?;
        write!(f, ", {}: {}", "cycles", self.cycles())?;
        write!(f, ", {}: {}", "max_cycles", self.max_cycles())?;
        write!(f, ", {}: {}", "running", self.running())?;
        write!(f, ", {}: {}", "isa", self.isa())?;
        write!(f, ", {}: {}", "version", self.version())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> StepProof64Reader<'r> {
    pub const FIELD_COUNT: usize = 10;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn step_num(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn registers(&self) -> Registers64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Registers64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn pc(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn next_pc(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn memory(&self) -> MemoryProofReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        MemoryProofReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn cycles(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        let end = molecule::unpack_number(&slice[28..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn max_cycles(&self) -> Uint64Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[28..]) as usize;
        let end = molecule::unpack_number(&slice[32..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn running(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[32..]) as usize;
        let end = molecule::unpack_number(&slice[36..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn isa(&self) -> ByteReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[36..]) as usize;
        let end = molecule::unpack_number(&slice[40..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn version(&self) -> Uint32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[40..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[44..]) as usize;
            Uint32Reader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Uint32Reader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for StepProof64Reader<'r> {
    type Entity = StepProof64;
    const NAME: &'static str = "StepProof64Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        StepProof64Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Uint64Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Registers64Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Uint64Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Uint64Reader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        MemoryProofReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Uint64Reader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        Uint64Reader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        ByteReader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        ByteReader::verify(&slice[offsets[8]..offsets[9]], compatible)?;
        Uint32Reader::verify(&slice[offsets[9]..offsets[10]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct StepProof64Builder {
    pub(crate) step_num: Uint64,
    pub(crate) registers: Registers64,
    pub(crate) pc: Uint64,
    pub(crate) next_pc: Uint64,
    pub(crate) memory: MemoryProof,
    pub(crate) cycles: Uint64,
    pub(crate) max_cycles: Uint64,
    pub(crate) running: Byte,
    pub(crate) isa: Byte,
    pub(crate) version: Uint32,
}
impl StepProof64Builder {
    pub const FIELD_COUNT: usize = 10;
    pub fn step_num(mut self, v: Uint64) -> Self {
        self.step_num = v;
        self
    }
    pub fn registers(mut self, v: Registers64) -> Self {
        self.registers = v;
        self
    }
    pub fn pc(mut self, v: Uint64) -> Self {
        self.pc = v;
        self
    }
    pub fn next_pc(mut self, v: Uint64) -> Self {
        self.next_pc = v;
        self
    }
    pub fn memory(mut self, v: MemoryProof) -> Self {
        self.memory = v;
        self
    }
    pub fn cycles(mut self, v: Uint64) -> Self {
        self.cycles = v;
        self
    }
    pub fn max_cycles(mut self, v: Uint64) -> Self {
        self.max_cycles = v;
        self
    }
    pub fn running(mut self, v: Byte) -> Self {
        self.running = v;
        self
    }
    pub fn isa(mut self, v: Byte) -> Self {
        self.isa = v;
        self
    }
    pub fn version(mut self, v: Uint32) -> Self {
        self.version = v;
        self
    }
}
impl molecule::prelude::Builder for StepProof64Builder {
    type Entity = StepProof64;
    const NAME: &'static str = "StepProof64Builder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.step_num.as_slice().len()
            + self.registers.as_slice().len()
            + self.pc.as_slice().len()
            + self.next_pc.as_slice().len()
            + self.memory.as_slice().len()
            + self.cycles.as_slice().len()
            + self.max_cycles.as_slice().len()
            + self.running.as_slice().len()
            + self.isa.as_slice().len()
            + self.version.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.step_num.as_slice().len();
        offsets.push(total_size);
        total_size += self.registers.as_slice().len();
        offsets.push(total_size);
        total_size += self.pc.as_slice().len();
        offsets.push(total_size);
        total_size += self.next_pc.as_slice().len();
        offsets.push(total_size);
        total_size += self.memory.as_slice().len();
        offsets.push(total_size);
        total_size += self.cycles.as_slice().len();
        offsets.push(total_size);
        total_size += self.max_cycles.as_slice().len();
        offsets.push(total_size);
        total_size += self.running.as_slice().len();
        offsets.push(total_size);
        total_size += self.isa.as_slice().len();
        offsets.push(total_size);
        total_size += self.version.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.step_num.as_slice())?;
        writer.write_all(self.registers.as_slice())?;
        writer.write_all(self.pc.as_slice())?;
        writer.write_all(self.next_pc.as_slice())?;
        writer.write_all(self.memory.as_slice())?;
        writer.write_all(self.cycles.as_slice())?;
        writer.write_all(self.max_cycles.as_slice())?;
        writer.write_all(self.running.as_slice())?;
        writer.write_all(self.isa.as_slice())?;
        writer.write_all(self.version.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        StepProof64::new_unchecked(inner.into())
    }
}
